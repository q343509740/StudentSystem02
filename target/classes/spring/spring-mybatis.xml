<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd
                        http://www.springframework.org/schema/tx
                        http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- 1.配置数据库相关参数 -->
    <context:property-placeholder location="classpath:jdbc.properties"/>

    <!-- 2.配置druid数据源 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 配置连接池属性 -->
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

        <!-- 配置初始化大小 -->
        <property name="initialSize" value="${initialSize}"/>
        <!-- 最大连接数量 -->
        <property name="maxActive" value="${maxActive}"/>
        <!-- 最小空闲连接 -->
        <property name="minIdle" value="${minIdle}"/>
        <!-- 超时等待时间 -->
        <property name="maxWait" value="${maxWait}"/>
        <!-- 配置间隔多久进行一次检测,检测需要关闭空闲连接,单位毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}"/>

        <!-- 验证连接有效与否的SQL，不同的数据配置不同 -->
        <property name="validationQuery" value="SELECT 1"/>
        <!-- 检测连接是否有效 -->
        <property name="testWhileIdle" value="true"/>
        <!-- 从池中取出连接前进行检验，防止取到的连接不可用 -->
        <property name="testOnBorrow" value="true"/>
        <!-- 归还到池中前进行检验 -->
        <property name="testOnReturn" value="false"/>

        <!-- 打开PSCache，预缓存设置 -->
        <property name="poolPreparedStatements" value="true"/>
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>

        <!-- 开启Druid的监控统计功能 -->
        <property name="filters" value="stat,log4j2"/>

        <!-- 在 DruidDataSource中配置 -->
        <property name="proxyFilters">
            <list>
                <ref bean="log-filter"/>
            </list>
        </property>
    </bean>

    <!-- 创建基于druid的logger -->
    <bean id="log-filter" class="com.alibaba.druid.filter.logging.Log4j2Filter">
        <!-- 表示是否连接所有Connection相关的日志 -->
        <property name="connectionLogEnabled" value="false"/>
        <!-- 表示是否连接所有Statement相关的日志 -->
        <property name="statementLogEnabled" value="false"/>
        <!-- 表示是否显示结果集 -->
        <property name="resultSetLogEnabled" value="false"/>
        <!-- 表示是否显示SQL语句 -->
        <property name="statementExecutableSqlLogEnable" value="true"/>
    </bean>

    <!-- 3.配置Mybatis的SqlSessionFactory对象 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 配置Mybatis全局配置文件 -->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!-- 注入数据库连接池 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- 扫描entity包,使用别名 -->
        <property name="typeAliasesPackage" value="com.ray.entity"/>
        <!-- 扫描配置文件 -->
        <property name="mapperLocations" value="classpath:mapping/*.xml"/>
        <!-- 分页插件 -->
        <property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageInterceptor">
                    <!-- 这里的几个配置主要演示如何使用，如果不理解，一定要去掉下面的配置 -->
                    <property name="properties">
                        <value>
                            <!--helperDialect=mysql-->
                            <!--reasonable=true-->
                            <!--supportMethodsArguments=true-->
                            <!--params=count=countSql-->
                            <!--autoRuntimeDialect=true-->
                        </value>
                    </property>
                </bean>
            </array>
        </property>
    </bean>

    <!-- 4.配置扫描Dao接口包,动态实现Dao接口,注入到spring容器中 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 给出需要扫描Dao接口包 -->
        <property name="basePackage" value="com.ray.dao"/>
    </bean>
</beans>